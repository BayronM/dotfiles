#+TITLE: Qtile Configuration
#+AUTHOR: BayronM
#+LANGUAGE: en

* Table of Contents :TOC:
- [[#introduction][Introduction]]
- [[#imports][Imports]]
- [[#variables][Variables]]
  - [[#mod-key-and-applications][Mod Key and Applications]]
- [[#key-bindings][Key Bindings]]
  - [[#essential-bindings][Essential Bindings]]
  - [[#monitor-focus-bindings][Monitor Focus Bindings]]
  - [[#layout-control-bindings][Layout Control Bindings]]
  - [[#media-keys][Media Keys]]
- [[#groups][Groups]]
- [[#layouts][Layouts]]
- [[#screens-and-widgets][Screens and Widgets]]
- [[#window-management-functions][Window Management Functions]]
- [[#mouse-bindings][Mouse Bindings]]
- [[#other-configurations][Other Configurations]]
- [[#autosart-script][Autosart Script]]
- [[#qtile-bar-configuration][Qtile bar configuration]]
  - [[#import-modules][Import Modules]]
  - [[#variables-1][Variables]]
  - [[#colors-of-the-bar][Colors of the bar]]
  - [[#font-and-decorationqtile_extras][Font and decoration(qtile_extras)]]
  - [[#groupbox-rules][GroupBox rules]]
  - [[#main-screen-widgets][Main screen widgets]]
  - [[#additional-screen-widgets][Additional screen widgets]]

* Introduction
  This file contains the configuration for Qtile window manager. It is divided into sections with detailed explanations.

* Imports
#+BEGIN_SRC python :tangle config.py
import os
import subprocess
from typing import List

from libqtile import bar, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.dgroups import simple_key_binder
from qtile_bar import widgets_list_center, widgets_left_right

##layouts
from libqtile.layout import xmonad, stack, columns, max, zoomy

#+END_SRC

* Variables
** Mod Key and Applications
#+BEGIN_SRC python :tangle config.py
mod = "mod4"  # Sets mod key to SUPER/WINDOWS
myTerm = "alacritty"  # terminal
myBrowser = "brave"  # browser
  #+END_SRC

* Key Bindings
** Essential Bindings
#+BEGIN_SRC python :tangle config.py
keys = [
    Key([mod], "Return", lazy.spawn(myTerm), desc="Launches My Terminal"),
    Key([mod, "shift"], "Return", lazy.spawn("rofi -show drun -theme ~/.config/rofi/launchers/type-1/style-7.rasi"), desc="Run Launcher"),
    Key(["control", "shift"], "q", lazy.shutdown()),
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle through layouts"),
    Key([mod, "shift"], "c", lazy.window.kill(), desc="Kill active window"),
    Key([mod, "shift"], "r", lazy.restart(), desc="Restart Qtile"),
    Key(["control", "shift"], "e", lazy.spawn("emacsclient -c -a emacs"), desc="Doom Emacs"),
    Key([mod,"shift"], "s", lazy.spawn("flameshot gui"), desc="Screenshot tool"),
]
#+END_SRC

** Monitor Focus Bindings
#+BEGIN_SRC python :tangle config.py
keys += [
    Key([mod], "w", lazy.to_screen(0), desc="Keyboard focus to monitor 1"),
    Key([mod], "e", lazy.to_screen(1), desc="Keyboard focus to monitor 2"),
    Key([mod], "r", lazy.to_screen(2), desc="Keyboard focus to monitor 3"),
]
#+END_SRC

** Layout Control Bindings
#+BEGIN_SRC python :tangle config.py
keys += [
    Key([mod], "j", lazy.layout.down(), desc="Move focus down in current stack pane"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up in current stack pane"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move windows down in current stack"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move windows up in current stack"),
    Key([mod], "h", lazy.layout.shrink(), lazy.layout.decrease_nmaster(), desc="Shrink window (MonadTall)"),
    Key([mod], "l", lazy.layout.grow(), lazy.layout.increase_nmaster(), desc="Expand window (MonadTall)"),
    Key([mod], "n", lazy.layout.normalize(), desc="Normalize window size ratios"),
    Key([mod], "m", lazy.layout.maximize(), desc="Toggle window between minimum and maximum sizes"),
    Key([mod, "shift"], "f", lazy.window.toggle_floating(), desc="Toggle floating"),
    Key([mod], "f", lazy.window.toggle_fullscreen(), desc="Toggle fullscreen"),
    Key([mod, "shift"], "Tab", lazy.layout.rotate(), lazy.layout.flip(), desc="Switch which side main pane occupies (XmonadTall)"),
    Key([mod], "space", lazy.layout.next(), desc="Switch window focus to other pane(s) of stack"),
    Key([mod, "shift"], "space", lazy.layout.toggle_split(), desc="Toggle between split and unsplit sides of stack"),
    Key(
        [mod],
        "XF86AudioLowerVolume",
        lazy.layout.shrink(),
        lazy.layout.decrease_nmaster(),
        desc="Shrink window (MonadTall), decrease number in master pane (Tile)",
    ), # use the Knob to shrink the window
    Key(
        [mod],
        "XF86AudioRaiseVolume",
        lazy.layout.grow(),
        lazy.layout.increase_nmaster(),
        desc="Expand window (MonadTall), increase number in master pane (Tile)",
    ),
    Key(
        [mod],
        "XF86AudioMute",
        lazy.layout.normalize(),
        desc="normalize window size ratios",
    )
]
#+END_SRC

#+RESULTS:

** Media Keys
#+BEGIN_SRC python :tangle config.py
keys += [
    Key([], "XF86AudioMute", lazy.spawn("amixer -D pulse set Master 1+ toggle")),
    Key([], "XF86AudioLowerVolume", lazy.spawn("amixer -D pulse sset Master 2%-")),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("amixer -D pulse sset Master 2%+")),
    Key([], "XF86AudioPlay", lazy.spawn("playerctl play-pause")),
    Key([], "XF86AudioNext", lazy.spawn("playerctl next")),
    Key([], "XF86AudioPrev", lazy.spawn("playerctl previous")),
]
#+END_SRC
* Groups
#+BEGIN_SRC python :tangle config.py
groups = [
    Group("Dev",label=" " ,layout="monadtall"),
    Group("Net",label=" ", layout="monadtall"), # brave icon from font awesome
    Group("Term",label=" ", layout="monadtall"),
    Group("Org",label=" ", layout="monadtall"),
    Group("File",label=" ", layout="monadtall"),
    Group("Chat",label=" ", layout="monadtall"),
    Group("Mus",label=" ", layout="monadtall", matches=[Match(wm_class="Deezer"), Match(wm_class="Spotify"), Match(wm_class="youtube-music")]),
    Group("Vid",label=" ", layout="monadtall"),
    Group("Git",label=" ", layout="monadtall", persist=False),
]

dgroups_key_binder = simple_key_binder("mod4")
#+END_SRC

* Layouts
#+BEGIN_SRC python :tangle config.py
layout_theme = {
    "border_width": 2,
    "margin": 6,
    "border_focus": "#43d902",
    "border_normal": "#1D2330",
}

layouts = [
    stack.Stack(stacks=2, **layout_theme),
    columns.Columns(**layout_theme),
    zoomy.Zoomy(**layout_theme),
    xmonad.MonadTall(**layout_theme),
    max.Max(**layout_theme),
]
#+END_SRC

* Screens and Widgets
#+BEGIN_SRC python :tangle config.py
screens = [
    Screen(top=bar.Bar(widgets=widgets_list_center(), background="#00000000", size=32, margin=6)),
    #Screen(top=bar.Bar(widgets=widgets_left_right(), opacity=1.0, size=20)),
    #Screen(top=bar.Bar(widgets=widgets_left_right(), opacity=1.0, size=20)),
  ]

#+END_SRC

* Window Management Functions
#+BEGIN_SRC python :tangle config.py
def window_to_prev_group(qtile):
  if qtile.currentWindow is not None:
    i = qtile.groups.index(qtile.currentGroup)
    qtile.currentWindow.togroup(qtile.groups[i - 1].name)

def window_to_next_group(qtile):
  if qtile.currentWindow is not None:
    i = qtile.groups.index(qtile.currentGroup)
    qtile.currentWindow.togroup(qtile.groups[i + 1].name)

def window_to_previous_screen(qtile):
  i = qtile.screens.index(qtile.current_screen)
  if i != 0:
    group = qtile.screens[i - 1].group.name
    qtile.current_window.togroup(group)

def window_to_next_screen(qtile):
  i = qtile.screens.index(qtile.current_screen)
  if i + 1 != len(qtile.screens):
    group = qtile.screens[i + 1].group.name
    qtile.current_window.togroup(group)

def switch_screens(qtile):
  i = qtile.screens.index(qtile.current_screen)
  group = qtile.screens[i - 1].group
  qtile.current_screen.set_group(group)

# open an app in a specific group
def spawn_app_in_group(app_name, group_name):
  lazy.spawn(app_name)
  lazy.window.togroup(group_name)
#+END_SRC

* Mouse Bindings
#+BEGIN_SRC python :tangle config.py
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]
  #+END_SRC

* Other Configurations
#+BEGIN_SRC python :tangle config.py
dgroups_app_rules = []  # type: List
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False

auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True
auto_minimize = True

@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser("~/.config/qtile/autostart.sh")
    subprocess.call([home])

wmname = "LG3D"
#+END_SRC


* Autosart Script
#+BEGIN_SRC sh :tangle autostart.sh

#!/bin/sh
picom --backend glx  &
flameshot &
~/.fehbg &
/usr/bin/emacs --daemon &


#+END_SRC

* Qtile bar configuration
This is my bar configuration for qtile, I use two or three screens, so I have two functions to create the widgets for the bar, one for the main screen and another for the additional screens. I use the qtile_extras library to create the widgets, you can find the library in the following link: https://qtile-extras.readthedocs.io/en/stable/index.html


** Import Modules
#+BEGIN_SRC python :tangle qtile_bar.py
import os
import socket
import copy

from libqtile import bar, qtile
from libqtile.lazy import lazy
from qtile_extras import widget
from qtile_extras.widget.decorations import BorderDecoration, RectDecoration
from qtile_extras.popup.templates.mpris2 import DEFAULT_LAYOUT
from qtile_extras.widget.groupbox2 import GroupBoxRule
from xdg import IconTheme
from xdg import Config as xdg_config



import subprocess
#+END_SRC

** Variables
#+BEGIN_SRC python :tangle qtile_bar.py
MY_TERM = "alacritty"
spawn_nvidia_GPU_utilization = (
    "nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits"
)
#+END_SRC

** Colors of the bar
#+BEGIN_SRC python :tangle qtile_bar.py
colors = [
    ["#282c34", "#282c34"],
    ["#1c1f24", "#1c1f24"],
    ["#dfdfdf", "#dfdfdf"],
    ["#ff6c6b", "#ff6c6b"],
    ["#98be65", "#98be65"],
    ["#da8548", "#da8548"],
    ["#51afef", "#51afef"],
    ["#636363", "#636363"],
    ["#46d9ff", "#46d9ff"],
    ["#ffffff", "#ffffff"],
]

color_palette = [
    "#577590",
    "#43aa8b",
    "#90be6d",
    "#f9c74f",
    "#f8961e",
    "#f9844a",
    "#f94144",
]
#+END_SRC

** Font and decoration(qtile_extras)
#+BEGIN_SRC python :tangle qtile_bar.py
prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())

font_defaults = dict(
    font="ShureTechMono Nerd Font Bold",
    fontsize=15,
)
font_defaults = font_defaults.copy()
font_groupbox = font_defaults.copy()
font_groupbox["fontsize"] = 25

decoration_defaults = {
    "decorations": [
        RectDecoration(
            radius=4,
            padding_y=0,
            filled=True,
            group=True,
            colour=colors[0],
            line_width=2,
        )
    ],
    "padding": 7,
}

decoration_cpu = copy.deepcopy(decoration_defaults)
decoration_cpu["decorations"][0].line_colour = color_palette[0]

decoration_gpu = copy.deepcopy(decoration_defaults)
decoration_gpu["decorations"][0].line_colour = color_palette[1]

decoration_memory = copy.deepcopy(decoration_defaults)
decoration_memory["decorations"][0].line_colour = color_palette[2]

decoration_clock = copy.deepcopy(decoration_defaults)
decoration_clock["decorations"][0].line_colour = color_palette[3]

decoration_mpris = copy.deepcopy(decoration_defaults)
decoration_mpris["decorations"][0].line_colour = "#FF0000"

decoration_image = copy.deepcopy(decoration_defaults)
decoration_image["decorations"][0].line_width = 0


decoration_groupbox = {
    "decorations": [
        RectDecoration(
            radius=4,
            filled=True,
            padding_y=0,
            padding_x=0,
            group=True,
            colour="#282c34",
            extrawidth=5,

        )
    ],
    "padding": 5,
}

background_default = dict(
    background=colors[0],
)
#+END_SRC

** GroupBox rules
#+BEGIN_SRC python :tangle qtile_bar.py
xdg_config.icon_theme = "Papirus"
def get_icon_path(icon_name):
    return IconTheme.getIconPath(icon_name, size=32)

def icon_rules(rule, box):
    if box.group.name == "Dev":
        rule.image = get_icon_path("emacs")
    elif box.group.name == "Net":
        rule.image = get_icon_path("brave")
    elif box.group.name == "Term":
        rule.image = get_icon_path("Alacritty")
    elif box.group.name == "Org":
        rule.image = get_icon_path("text-org")
    elif box.group.name == "File":
        rule.image = get_icon_path("folder")
    elif box.group.name == "Chat":
        rule.image = get_icon_path("discord")
    elif box.group.name == "Mus":
        rule.image = get_icon_path("youtube-music")
    elif box.group.name == "Vid":
        rule.image = get_icon_path("mpv")
    elif box.group.name == "Git":
        rule.image = get_icon_path("git")


    return True

groupbox_rules = [
    GroupBoxRule(
        line_colour="#98be65",
        line_width=6,
    ).when(screen=GroupBoxRule.SCREEN_THIS),
    GroupBoxRule(
        line_colour="#118ab2",
        line_width=4,
    ).when(screen=GroupBoxRule.SCREEN_OTHER),
    GroupBoxRule().when(func=icon_rules),
    GroupBoxRule(
        line_colour="#636363",
        line_width=4,
    ).when(occupied=False),
    GroupBoxRule(
        line_colour="#f94144",
        line_width=4,
    ).when(urgent=True),
    GroupBoxRule(
        line_colour="#ffffff",
        line_width=4,
    ).when(occupied=True),

]
#+END_SRC



** Main screen widgets
#+BEGIN_SRC python :tangle qtile_bar.py
def widgets_list_center():
    widgets_list = [
        widget.Sep(linewidth=0, padding=6, foreground=colors[2]),
        widget.Image(
            filename="~/.config/qtile/img/arch_logo.png",
            scale=True,
            mouse_callbacks={"Button1": lazy.spawn("oblogout")},
            ,**decoration_image,
        ),
        widget.Sep(linewidth=0, padding=12, foreground=colors[2]),
        widget.Mpris2(
            name="Youtube Music",
            objname="org.mpris.MediaPlayer2.YoutubeMusic",
            popup_layout=DEFAULT_LAYOUT,
            **font_defaults,
            **decoration_mpris,
            scroll=True,
            width=250,
        ),
        widget.Spacer(
            length=bar.STRETCH,
        ),
        widget.GroupBox2(
            padding_x=7,
            padding_y=0,
            margin_x=2,
            margin_y=1,
            rules=groupbox_rules,
            ,**font_groupbox,
            ,**decoration_groupbox,
        ),
        widget.Spacer(
            length=bar.STRETCH,
        ),
        widget.ALSAWidget(
            mode="bar",
            update_interval=0.1,
            ,**decoration_defaults,
            step=1,
            ,**font_defaults,
        ),
        widget.Sep(linewidth=0, padding=6, foreground=colors[0]),
        widget.KeyboardLayout(
            ,**font_defaults,
            configured_keyboards=["us", "latam"],
            ,**decoration_defaults,
        ),
        widget.CurrentLayoutIcon(
            foreground=colors[2],
            scale=0.5,
            ,**decoration_defaults,
        ),
        widget.Sep(linewidth=0, padding=6, foreground=colors[0]),
        widget.CPU(
            ,**font_defaults,
            ,**decoration_cpu,
        ),
        widget.ThermalSensor(
            ,**font_defaults,
            ,**decoration_cpu,
            tag_sensor="Package id 0",
        ),
        widget.Sep(linewidth=0, padding=6, foreground=colors[0]),
        widget.NvidiaSensors(
            format="GPU {temp}°C",
            ,**font_defaults,
            ,**decoration_gpu,
            mouse_callbacks={
                "Button1": lambda: qtile.cmd_spawn(
                    MY_TERM + " -e watch -n 1 nvidia-smi"
                )
            },
        ),
        widget.GenPollText(
            func=lambda: subprocess.check_output(
                spawn_nvidia_GPU_utilization, shell=True
            )
            .decode("utf-8")
            .splitlines()[0]
            + "%",
            update_interval=5,
            ,**font_defaults,
            ,**decoration_gpu,
            mouse_callbacks={
                "Button1": lambda: qtile.cmd_spawn(
                    MY_TERM + " -e watch -n 1 nvidia-smi"
                )
            },
        ),
        widget.Sep(linewidth=0, padding=6, foreground=colors[2]),
        widget.Memory(
            mouse_callbacks={"Button1": lambda: qtile.cmd_spawn(MY_TERM + " -e btop")},
            format=" {MemUsed: .00f} MB/{MemTotal: .0f} MB",
            measure_mem="M",
            ,**font_defaults,
            ,**decoration_memory,
        ),
        widget.Sep(linewidth=0, padding=6, foreground=colors[2]),
        widget.Bluetooth(
            ,**decoration_clock,
            fmt="󰂯",
            font="ShureTechMono Nerd Font Bold",
            fontsize=20,
            foreground=colors[6],
        ),
        widget.StatusNotifier(**decoration_clock, icon_size=20),
        widget.AnalogueClock(
            ,**font_defaults,
            ,**decoration_clock,
            second_size=1,
            second_length=0.9,
            minute_length=0.9,
            adjust_y=-6,
            face_shape="circle",
            face_color=colors[0],
            margin=10,
        ),
        widget.Clock(
            format="%B %d - %H:%M ",
            ,**font_defaults,
            ,**decoration_clock,
        ),
        widget.Sep(
            linewidth=0,
            padding=6,
            foreground=colors[0],
        ),
    ]
    return widgets_list
#+END_SRC

** Additional screen widgets
#+BEGIN_SRC python :tangle qtile_bar.py
def widgets_left_right():
    widgets_list = [
        widget.Sep(linewidth=0, padding=6, foreground=colors[2], background=colors[0]),
        widget.Image(
            filename="~/.config/qtile/icons/python-white.png",
            scale="False",
            mouse_callbacks={"Button1": lambda: qtile.cmd_spawn(MY_TERM)},
        ),
        widget.Sep(linewidth=0, padding=6, foreground=colors[2], background=colors[0]),
        widget.GroupBox(
            font="Ubuntu Bold",
            fontsize=15,
            margin_y=3,
            margin_x=0,
            padding_y=5,
            padding_x=3,
            borderwidth=3,
            active=colors[2],
            inactive=colors[7],
            rounded=False,
            highlight_color=colors[1],
            highlight_method="block",
            this_current_screen_border=colors[6],
            this_screen_border=colors[4],
            other_current_screen_border=colors[6],
            other_screen_border=colors[4],
            foreground=colors[2],
            background=colors[0],
        ),
        widget.TextBox(
            text="|",
            font="Ubuntu Mono",
            background=colors[0],
            foreground="#474747",
            padding=2,
            fontsize=14,
        ),
        widget.CurrentLayoutIcon(
            custom_icon_paths=[os.path.expanduser("~/.config/qtile/icons")],
            foreground=colors[2],
            background=colors[0],
            padding=0,
            scale=0.7,
        ),
        widget.CurrentLayout(foreground=colors[2], background=colors[0], padding=5),
        widget.TextBox(
            text="|",
            background=colors[0],
            foreground="#474747",
            padding=2,
            fontsize=14,
        ),
        widget.WindowName(foreground=colors[6], background=colors[0], padding=0),
        widget.Sep(linewidth=0, padding=6, foreground=colors[0], background=colors[0]),
        widget.Mpris2(scroll_chars=30, background=colors[0]),
        widget.CheckUpdates(
            update_interval=1800,
            distro="Arch_checkupdates",
            display_format="Updates: {updates} ",
            foreground=colors[5],
            colour_have_updates=colors[5],
            colour_no_updates=colors[5],
            mouse_callbacks={
                "Button1": lambda: qtile.cmd_spawn(MY_TERM + " -e sudo pacman -Syu")
            },
            padding=5,
            background=colors[0],
            decorations=[
                BorderDecoration(
                    colour=colors[5],
                    border_width=[0, 0, 2, 0],
                    padding_x=5,
                    padding_y=None,
                )
            ],
        ),
        widget.Sep(linewidth=0, padding=6, foreground=colors[0], background=colors[0]),
        widget.Pomodoro(background=colors[0]),
        widget.Sep(linewidth=0, padding=6, foreground=colors[0], background=colors[0]),
        widget.Clock(
            foreground="#ffffff",
            background=colors[0],
            format="%A, %B %d - %H:%M ",
            ,**font_defaults,
            ,**decoration_clock,
        ),
        widget.Sep(
            linewidth=0,
            padding=6,
            foreground=colors[0],
            background=colors[0],
        ),
    ]
    return widgets_list
#+END_SRC
